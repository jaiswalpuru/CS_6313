lines(density(rep), lwd = 2, col = "chocolate3")
rep <- replicate(10000, max(rexp(n=1, rate=1/10),rexp(n=1, rate=1/10)))
hist(rep,freq=FALSE, main="density curve")
lines(density(rep),lwd=3, col="red")
hist(rep,freq=FALSE, main="density curve")
lines(density(rep),lwd=1, col="red")
hist(rep,freq=FALSE)
lines(density(rep),lwd=1, col="black")
hist(rep,freq=FALSE, main="pdf")
lines(density(rep),lwd=1, col="black")
hist(rep, col="grey",border="black", prob=TRUE)
lines(density(rep), lwd = 2, col = "chocolate3")
hist(rep, col="grey",border="black", prob=TRUE)
lines(density(rep), lwd = 2, col = "chocolate3")
hist(rep, col="grey",border="black", prob=TRUE)
lines(density(rep), lwd = 2, col = "chocolate3")
rep <- replicate(10000, max(rexp(n=1, rate=1/10),rexp(n=1, rate=1/10)))
hist(rep,freq=FALSE, main="pdf")
lines(density(rep),lwd=1, col="black")
rep <- replicate(10000, max(rexp(n=1, rate=1/10),rexp(n=1, rate=1/10)))
hist(rep,
col="green",
border="black",
prob = TRUE,
xlab = "temp",
main = "GFG")
lines(density(rep),
lwd = 2,
col = "chocolate3")
rep <- replicate(10000, max(rexp(n=1, rate=1/10),rexp(n=1, rate=1/10)))
hist(rep,
col="green",
border="black",
prob = TRUE,
#xlab = "temp",
main = "pdf")
lines(density(rep),
lwd = 2,
col = "chocolate3")
rep <- replicate(10000, max(rexp(n=1, rate=1/10),rexp(n=1, rate=1/10)))
hist(rep,
col="green",
border="black",
prob = TRUE,
xlab = "rep",
main = "pdf")
lines(density(rep),
lwd = 2,
col = "chocolate3")
x<-rnorm(5000)
x
x^2
x^2>2
x^2>2
maen(x^2>2)
mean(x^2>2)
x
x<-rnorm(5000, max=2,min=3)
x<-rnorm(5000)
list.files(".")
read.csv("roadmap.csv")
read.csv("roadrace.csv")
read.csv("./Desktop/code/UTD\ Course\ Work/roadrace.csv")
read.csv("./roadrace.csv")
read.csv("./Desktop")
read.csv("/Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
p = read.csv("./Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
p <- read.csv("./Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
data.1 <- read.csv("./Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
data.1
data.1
data.1[3]
data.1[9]
data.1[11]
barplot(data.1[11])
> sum(data$Maine == 'Away')
barplot(c(sum(data.1$Maine == 'Away'), sum(data.1$Maine == 'Maine')), names.arg = c('Away', 'Maine'), space = 0.25, ylab = 'Number of runners')>sum(data.1$Maine == 'Away')
c(sum(data.1$Maine))
c(sum(data.1$Maine=='Maine'))
c(sum(data.1$Maine=='Away'))
nam.args
name.args
function (height, ...)
barplot
help(barplot)
barplot(c(sum(data.1$Maine == 'Away'), sum(data.1$Maine == 'Maine')), names.arg = c('Away', 'Maine'), space = 0.2, ylab = 'Number of runners')>sum(data.1$Maine == 'Away')
barplot(c(sum(data.1$Maine == 'Maine'), sum(data.1$Maine == 'Away')), names.arg = c('Maine', 'Away'), space = 0.2, ylab = 'Number of runners')
>sum(data.1$Maine == 'Away')
>sum(data.1$Maine == 'Away')
barplot(c(sum(data.1$Maine == 'Maine'), sum(data.1$Maine == 'Away')), names.arg = c('Maine', 'Away'), space = 0.2, ylab = 'Runners')
barplot(c(sum([1,2,3])),sum([4,5,6]))
barplot(c(sum(1,2,3),sum(4,5,6)))
# Apply barplot function on column 11 and generate plots for variables Maine and Away
barplot(c(sum(data.1$Maine == 'Maine'), sum(data.1$Maine == 'Away')), names.arg = c('Maine', 'Away'), space = 0.2, ylab = 'Runners')
# # Read the data from roadrace.csv
data.1 <- read.csv("./Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
# Apply barplot function on column 11 and generate plots for variables Maine and Away
barplot(c(sum(data.1$Maine == 'Maine'), sum(data.1$Maine == 'Away')), names.arg = c('Maine', 'Away'), space = 0.2, ylab = 'Runners')
sum(data.1$Maine='Mainw')
sum(data.1$Maine='Maine')
sum(data.1$Maine=='Maine')
sum(data.1$Maine=='Maine')
sum(data.1$Maine=='Away')
sum(data.1)
sum(data.1$Maine)
count(data.1$Maine)
count(data.1, "Maine")
ddply
ddply()()
ddply()
#Total Runners
sum(data.1$Maine=='Maine')+sum(data.1$Maine=='Away')
#Total Runners
total <- sum(data.1$Maine=='Maine')+sum(data.1$Maine=='Away')
maine.sum = sum(data.1$Maine=='Maine')
away.sum = sum(data.1$Maine=='Away')
print(away.sum)
print(maine.sum)
# # Read the data from roadrace.csv
data.1 <- read.csv("./Desktop/code/UTD\ Course\ Work/Statistical\ Methods\ For\ Data\ Science\ CS_6313/Mini\ Projects/Mini\ Project\ 2/roadrace.csv")
# Apply barplot function on column 11 and generate plots for variables Maine and Away
barplot(c(sum(data.1$Maine == 'Maine'), sum(data.1$Maine == 'Away')), names.arg = c('Maine', 'Away'), space = 0.2, ylab = 'Runners')
maine.sum = sum(data.1$Maine=='Maine')
away.sum = sum(data.1$Maine=='Away')
print(maine.sum)
print(away.sum)
#Total Runners
total <- sum(data.1$Maine=='Maine')+sum(data.1$Maine=='Away')
print(total)
#Calculate percentage
maine.percent <- (maine.sum/total)*100
print(maine.percent)
away.percent <- (away.sum/total)*100
print(away.percent)
AwayRunnerTime = data$Time..minutes.[which(data$Maine == 'Away')] > hist(AwayRunnerTime, xlim = range(0,200), ylim = range(0,2000))
AwayRunnerTime = data$Time.minutes.[which(data$Maine == 'Away')] > hist(AwayRunnerTime, xlim = range(0,200), ylim = range(0,2000))
AwayRunnerTime <- data$Time.minutes.[which(data$Maine == 'Away')] > hist(AwayRunnerTime, xlim = range(0,200), ylim = range(0,2000))
data.1$Time..minutes.
away.runtime <- data.1$Time..minutes.[which(data.1$Maine=='Maine')]
away.runtime
away.runtime <- data.1$Time..minutes.[which(data.1$Maine=='Maine')]
hist(away.runtime, xlim = range(0,200), ylim = (0,2000))
hist(away.runtime, xlim = range(0,200), ylim = range(0,2000))
away.runtime <- data.1$Time..minutes.[which(data.1$Maine=='Maine')]
hist(away.runtime, xlim = range(0,200), ylim = range(0,2000))
#Histogram for Maine group run time
maine.runtime <- data.1$Time..minutes.[which(data.1$Maine=='Maine')]
hist(maine.runtime, xlim = range(0,200), ylim = range(0,2000))
#Histogram for Away group run time
away.runtime <- data.1$Time..minutes.[which(data.1$Maine=='Away')]
hist(away.runtime, xlim = range(0,200), ylim = range(0,2000))
summary(maine.runtime)
summary(away.runtime)
mean(maine.runtime)
mean(away.runtime)
range(maine.runtime)
range(away.runtime)
sd(maine.runtime)
sd(away.runtime)
IQR(maine.runtime)
IQR(away.runtime)
boxplot(maine.runtime, away.runtime, names=c('Maine', 'Away'))
male.runner.age = data.1$Age[which(data.1$Sex=='M')]
female.runner.age = data.1$Age[which(data.1$Sex=='F')]
boxplot(male.runner.age, female.runner.age, names = c('Male Runners Age', 'Female Runners Age'))
male.runner.age = data.1$Age[which(data.1$Sex=='M')]
print(male.runner.age)
print(female.runner.age)
boxplot(male.runner.age, female.runner.age, names=c('Male Runners Age', 'Female Runners Age'))
MaleRunnersAge = data.1$Age[which(data.1$Sex=='M')]
FemaleRunnersAge = data.1$Age[which(data.1$Sex=='F')]
boxplot(MaleRunnersAge, FemaleRunnersAge, names = c('Male Runners Age', 'Female Runners Age')
boxplot(MaleRunnersAge, FemaleRunnersAge, names = c('Male Runners Age', 'Female Runners Age'))
boxplot(MaleRunnersAge, FemaleRunnersAge, names=c('Male Runners Age', 'Female Runners Age'))
boxplot(MaleRunnersAge, FemaleRunnersAge, names=c('Male Runners Age', 'Female Runners Age'))
male.runner.age = data.1$Age[which(data.1$Sex=='M')]
female.runner.age = data.1$Age[which(data.1$Sex=='F')]
print(male.runner.age)
print(female.runner.age)
boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
#boxplot
boxplot(maine.runtime, away.runtime, names=c('Maine', 'Away'))
IQR(maine.runtime)
#boxplot
boxplot(maine.runtime, away.runtime, names=c('Maine', 'Away'))
#boxplot
boxplot(maine.runtime, away.runtime, names=c('Maine', 'Away'))
male.runner.age = data.1$Age[which(data.1$Sex=='M')]
female.runner.age = data.1$Age[which(data.1$Sex=='F')]
print(male.runner.age)
print(female.runner.age)
boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
help(ggplot())
help(ggplot
help(ggplot)
help(ggplot)
ggplot() + boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
male.runner.age = data.1$Age[which(data.1$Sex=='M')]
female.runner.age = data.1$Age[which(data.1$Sex=='F')]
print(male.runner.age)
a = c(1,2,3)
male.runner.age = stroi(data.1$Age[which(data.1$Sex=='M')])
male.runner.age = strtoi(data.1$Age[which(data.1$Sex=='M')])
female.runner.age = strtoi(data.1$Age[which(data.1$Sex=='F')])
print(male.runner.age)
print(female.runner.age)
boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
male.runner.age = strtoi(data.1$Age[which(data.1$Sex=='M')])
female.runner.age = strtoi(data.1$Age[which(data.1$Sex=='F')])
print(male.runner.age)
print(female.runner.age)
boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
male.runner.age = strtoi(data.1$Age[which(data.1$Sex=='M')])
female.runner.age = strtoi(data.1$Age[which(data.1$Sex=='F')])
boxplot(male.runner.age, female.runner.age, names=c('MaleRunnersAge', 'FemaleRunnersAge'))
summary(male.runner.age)
mean(male.runner.age)
range(male.runner.age)
sd(male.runner.age)
IQR(male.runner.age)
summary(female.runner.age)
mean(female.runner.age)
range(female.runner.age)
sd(female.runner.age)
IQR(female.runner.age)
replicate(2, 0,1)
replicate(5, 0,1)
replicate(5, (0,1))
replicate(5, (1))
mse(1,1)
# Return the MOM and MLE
mle.mom <- function(n, theta){
sample_data = runif(n, 0, theta)
method_moments = 2 * mean(sample)
max_likelihood = max(sample.data)
return (c(max_likelihood, method_moments))
}
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
print(estimator)
estimator.mom = estimator[c(TRUE, FALSE)]
print(estimator.mom)
estimator.mle = estimator[c(FALSE, TRUE)]
print(estimator.mle)
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
# Return the MOM and MLE
mle.mom <- function(n, theta){
sample_data = runif(n, 0, theta)
method_moments = 2 * mean(sample)
max_likelihood = max(sample_data)
return (c(max_likelihood, method_moments))
}
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
print(estimator)
estimator.mom = estimator[c(TRUE, FALSE)]
print(estimator.mom)
estimator.mle = estimator[c(FALSE, TRUE)]
print(estimator.mle)
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
# Return the MOM and MLE
mle.mom <- function(n, theta){
sample_data = runif(n, 0, theta)
method_moments = 2 * mean(sample_data)
max_likelihood = max(sample_data)
return (c(max_likelihood, method_moments))
}
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
print(estimator.mom)
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
print(estimator.mom)
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
d= c(1,2,3,4,5)
d[c(TRUE,FALSE)]
d[c(FALSE,TRUE)]
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
print(estimator)
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
print(lenghts(estimator))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
print(lengths(estimator))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
mse <- function (n, theta){
estimator = replicate(1000, mle.mom(n,theta))
estimator = (estimator-theta)^2
estimator.mom = estimator[c(TRUE, FALSE)]
estimator.mle = estimator[c(FALSE, TRUE)]
return (c(mean(estimator.mle),mean(estimator.mom)))
}
mse(1,1)
mse.2.5 = mse(2,5)
#mean squared for all combinations of theta
mse.1.1 = mse(1,1)
mse.1.5 = mse(1,5)
mse.1.50 = mse(1,50)
mse.1.100 = mse(1,100)
mse.2.1 = mse(2,1)
mse.2.5 = mse(2,5)
mse.2.50 = mse(2,50)
mse.2.100 = mse(2,100)
mse.3.1 = mse(3,1)
mse.3.5 = mse(3,5)
mse.3.50 = mse(3,50)
mse.3.100 = mse(3,100)
mse.5.1 = mse(5,1)
mse.5.5 = mse(5,5)
mse.5.50 = mse(5,50)
mse.5.100 = mse(5,100)
mse.10.1 = mse(10,1)
mse.10.5 = mse(10,5)
mse.10.50 = mse(10,50)
mse.10.100 = mse(10,100)
mse.30.1 = mse(30,1)
mse.30.5 = mse(30,5)
mse.30.50 = mse(30,50)
mse.30.100 = mse(30,100)
mse.1.1
plot(c(1,5,50,100),
c(mse.1.1[1],mse.1.5[1], mse.1.50[1], mse.1.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 1")
lines(c(1,5,50,100), c(mse.1.1[2],mse.1.5[2], mse.1.50[2],
mse.1.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#n -> 2
plot(c(1,5,50,100),
c(mse.2.1[1],mse.2.5[1], mse.2.50[1], mse.2.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 2")
lines(c(1,5,50,100), c(mse.2.1[2],mse.2.5[2], mse.2.50[2],
mse.2.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#n -> 3
plot(c(1,5,50,100),
c(mse.3.1[1],mse.3.5[1], mse.3.50[1], mse.3.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 3")
lines(c(1,5,50,100), c(mse.3.1[2],mse.3.5[2], mse.3.50[2],
mse.3.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#n -> 5
plot(c(1,5,50,100),
c(mse.5.1[1],mse.5.5[1], mse.5.50[1], mse.5.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 5")
lines(c(1,5,50,100), c(mse.5.1[2],mse.5.5[2], mse.5.50[2],
mse.5.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#n -> 10
plot(c(1,5,50,100),
c(mse.10.1[1],mse.10.5[1], mse.10.50[1], mse.10.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 10")
lines(c(1,5,50,100), c(mse.10.1[2],mse.10.5[2], mse.10.50[2],
mse.10.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#n -> 30
plot(c(1,5,50,100),
c(mse.30.1[1],mse.30.5[1], mse.30.50[1], mse.30.100[1]), type="b",
xlab = 'theta', ylab = 'MSE', col = 'red', main = "n = 30")
lines(c(1,5,50,100), c(mse.30.1[2],mse.30.5[2], mse.30.50[2],
mse.30.100[2]), type="b", col = 'blue')
legend("topleft", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
plot(c(1,2,3,5,10,30), c(mse.1.1[1],mse.2.1[1], mse.3.1[1], mse.5.1[1],
mse.10.1[1], mse.30.1[1]), type="b", ylab = 'MSE',
xlab = 'n', col = 'red', main = "theta = 1")
lines(c(1,2,3,5,10,30), c(mse.1.1[2],mse.2.1[2], mse.3.1[2], mse.5.1[2],
mse.10.1[2], mse.30.1[2]), type="b", col = 'blue')
legend("topright", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
plot(c(1,2,3,5,10,30), c(mse.1.5[1],mse.2.5[1], mse.3.5[1], mse.5.5[1],
mse.10.5[1], mse.30.5[1]), type="b", ylab = 'MSE',
xlab = 'n', col = 'red', main = "theta = 5")
lines(c(1,2,3,5,10,30), c(mse.1.5[2],mse.2.5[2], mse.3.5[2], mse.5.5[2],
mse.10.5[2], mse.30.5[2]), type="b", col = 'blue')
legend("topright", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#theta -> 50
plot(c(1,2,3,5,10,30), c(mse.1.50[1],mse.2.50[1], mse.3.50[1], mse.5.50[1],
mse.10.50[1], mse.30.50[1]), type="b", ylab = 'MSE',
xlab = 'n', col = 'red', main = "theta = 5")
lines(c(1,2,3,5,10,30), c(mse.1.50[2],mse.2.50[2], mse.3.50[2], mse.5.50[2],
mse.10.50[2], mse.30.50[2]), type="b", col = 'blue')
legend("topright", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#theta -> 50
plot(c(1,2,3,5,10,30), c(mse.1.50[1],mse.2.50[1], mse.3.50[1], mse.5.50[1],
mse.10.50[1], mse.30.50[1]), type="b", ylab = 'MSE',
xlab = 'n', col = 'red', main = "theta = 50")
lines(c(1,2,3,5,10,30), c(mse.1.50[2],mse.2.50[2], mse.3.50[2], mse.5.50[2],
mse.10.50[2], mse.30.50[2]), type="b", col = 'blue')
legend("topright", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
#theta -> 100
plot(c(1,2,3,5,10,30), c(mse.1.100[1],mse.2.100[1], mse.3.100[1], mse.5.100[1],
mse.10.100[1], mse.30.100[1]), type="b", ylab = 'MSE',
xlab = 'n', col = 'red', main = "theta = 100")
lines(c(1,2,3,5,10,30), c(mse.1.100[2],mse.2.100[2], mse.3.100[2], mse.5.100[2],
mse.10.100[2], mse.30.100[2]), type="b", col = 'blue')
legend("topright", legend = c("MLE", "MOM"), col = c('red', 'blue'),
text.col = c('black','black'),lty = 1, pch = 1,
inset =0.01, ncol = 1, cex = 0.6, bty = 'n')
f <- function(x)
{
-(x)^2
}
optim(4,f,method = 'L-BFGS-B')
x^2
f <- function(x)
{
x^2
}
optim(4,f,method = 'L-BFGS-B')
f <- function(x)
{
-x^2
}
optim(4,f,method = 'L-BFGS-B')
1.2+ qt(0.95,28) * 3.6* sqrt(2/15)
1.2 - qt(0.95,28) * 3.6* sqrt(2/15)
dped
pwd
getwd()
setwd("~/Desktop/code/UTD Course Work/Statistical Methods For Data Science CS_6313/Mini Projects/Mini Project 5")
body.temp.heart.rate = read.csv("bodytemp-heartrate.csv", header=T)
#male and female separate datasets
male = subset(body.temp.heart.rate, body.temp.heart.rate$gender==1)
female = subset(body.temp.heart.rate, body.temp.heart.rate$gender==2)
# boxplots
boxplot(male$body_temperature, female$body_temperature,
main = "Boxplots of body temperatures", names = c('Males', 'Females'), ylab = "Temperature")
# QQ Plot
qqnorm(male$body_temperature, main='Q-Q Plot for male')
qqline(male$body_temperature)
qqnorm(female$body_temperature, main='Q-Q Plot for female')
qqline(female$body_temperature)
t.test(male$body_temperature, female$body_temperature, alternative = 'two.sided', var.equal = F)
boxplot(male$heart_rate, female$heart_rate,
main = "Boxplots of heart rate", names = c('Males', 'Females'), ylab = "Heart Rate")
# QQ Plot
qqnorm(male$heart_rate, main='Q-Q Plot for male')
qqline(male$heart_rate)
qqnorm(female$heart_rate, main='Q-Q Plot for female')
qqline(female$heart_rate)
t.test(male$heart_rate, female$heart_rate, alternative = 'two.sided', var.equal = F)
plot(male$heart_rate, male$body_temperature, pch=1, main='Scatter plot for males')
abline(lm(male$body_temperature~male$heart_rate))
abline(lm(male$body_temperature~male$heart_rate),"Gere")
plot(male$heart_rate, male$body_temperature, pch=1, main='Scatter plot for males')
abline(lm(male$body_temperature~male$heart_rate))
plot(female$heart_rate, female$body_temperature, pch=1, main='Scatter plot for females')
abline(lm(female$body_temperature~female$heart_rate))
cor(male$body_temperature,male$heart_rate)
cor(female$body_temperature,female$heart_rate)
